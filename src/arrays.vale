
fn each<A, F>(arr A, func F) void
rules(A Ref(_, _, [<_, _> _ * _])) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func!(arr[i]);
    set i = i + 1;
  }
}

fn eachI<A, F>(arr A, func F) void
rules(A Ref(_, _, [<_, _> _ * _])) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func!(i, arr[i]);
    set i = i + 1;
  }
}

fn each<A, F>(arr A, func F) void
rules(A Ref(_, _, Array<_, _, _>)) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func!(arr[i]);
    set i = i + 1;
  }
}

fn eachI<A, F>(arr A, func F) void
rules(A Ref(_, _, Array<_, _, _>)) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func!(i, arr[i]);
    set i = i + 1;
  }
}
