import stdlib.*;

struct List<E> rules(E Ref) {
  array! Array<mut, Opt<E>>;
  size! int;
}
fn List<E>() List<E>
rules(E Ref) {
  List<E>([*](0, (index){ __pretend<Opt<E>>() }), 0)
}
fn len<E>(list &List<E>) int { list.size }
fn add<E>(list &!List<E>, newElement E) {
  if (list.size == list.len()) {
    newLen = if (len(&list) == 0) { 1 } else { len(&list) * 2 };
    newArray =
       [*](newLen, &!IFunction1<mut, int, Opt<E>>((index){
          res Opt<E> = if (index < len(&list)) {
              result Opt<E> = (mut list.array[index] = None<E>());
              = result;
            } else {
              result Opt<E> = None<E>();
              = result;
            };
          ret res;
        }));
    mut list.array = newArray;
  }
  mut list.array[list.size] = Some<E>(newElement);
  mut list.size = list.size + 1;
}
fn get<E>(list &List<E>, index int) &E {
  a = list.array;
  = a[index].get();
}
// Perhaps we can find a way to make a function generic over permission?
fn get<E>(list &!List<E>, index int) &!E {
  a = list.array;
  = a[index]!.get();
}
fn set<E>(list &!List<E>, index int, value E) void {
  mut list.array[index] = Some(value);
}
fn toArray<E>(list &List<E>) Array<mut, E> {
  [*](list.len(), &!(i){ list.get(i) })
}
fn toImmArray<E>(list &List<E>) Array<imm, E> {
  [imm *](list.len(), &!(i){ list.get(i) })
}
fn toList<E>(arr &Array<_, E>) List<E> {
  list = List<E>();
  arr each (elem){
    list.add(elem);
  };
  = list;
}

fn each<E, F>(list &List<E>, func F) void {
  i! = 0;
  l = len(&list);
  while (i < l) {
    func(list.get(i));
    mut i = i + 1;
  }
}

fn each<E, F>(list &!List<E>, func F) void {
  i! = 0;
  l = len(&list);
  while (i < l) {
    func(list.get(i));
    mut i = i + 1;
  }
}

fn enumerate<E, F>(self &List<E>, func F) void {
    i! = 0;
    l = self.len();
    while (i < l) {
         func(self.get(i), i);
         mut i = i + 1;
    }
}

fn contains<E>(list &List<E>, element E) bool {
  i! = 0;
  l = len(&list);
  while (i < l) {
    if (list.get(i) == element) {
      ret true;
    }
    mut i = i + 1;
  }
  ret false;
}


fn remove<E>(list &!List<E>, removeAtIndex int) E {
  if (removeAtIndex < 0) {
    panic("Can't remove at negative index!");
  }
  if (removeAtIndex >= list.size) {
    panic("Can't remove, index out of bounds!");
  }

  temp! = (mut list.array[list.size - 1] = None<E>());
  i! = list.size - 2;
  while (i >= removeAtIndex) {
    mut temp = (mut list.array[i] = (mut temp = None<E>()));
    mut i = i - 1;
  }

  mut list.size = list.size - 1;

  ret temp^.get();
}


fn join(list &List<str>) str {
  combined! = "";
  list.each({ mut combined = combined + _; });
  ret combined;
}

fn map<E, F>(list &List<E>, func F) List<T>
rules(T Ref, Prot("__call", (&F, E), T)) {
  result = List<T>();
  list.each({ result!.add((func)(_)); });
  ret result;
}
