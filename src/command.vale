//export List<str> as StrTest;
export Array<imm, str> as StrChain;
export Array<mut, str> as MutStrChain;

struct Subprocess {
    path List<str>;
    cmd Command;
    result int; 
}

fn create_process(cmd str, args! List<str>, paths! List<str>){
    outcmd! = "hello"; 
    println("in create_process");    
    if (exists(cmd) != 1) {
       println("path exists");  
       each (&paths) (path){
            println("path name: " + path); 
            cmds = iterdir(path);
            each (&cmds) (exec){
                if(exec == cmd){
                    mut outcmd = path + "/" + exec;
                    println("found command: " + cmd);
                }
            }
        } 
    }else{
        mut outcmd = cmd;
    }

    if (outcmd == "hello") {
        panic("unable to find command " + cmd);
    }
    
    println("after loop: " + outcmd); 
    if (is_dir(outcmd) == 1) {
        panic("directories aren't executable"); 
    }
    imm = args.toArray<imm, str>(); 
}

fn from_path(cmd str, args! List<str>) {
    path! = List<str>();
    each (&get_env_var("PATH").split(":")) (path_val){
        path!.add(str(path_val));
    }
    ret create_process(cmd, args, path);
}

struct Command export imm{
    handle int;
}

//export Command as ExCommand;

fn get_env_var(name str) str extern;
fn launch_command(args Array<imm,str>) Command extern;
fn read_child_stdout(cmd Command, len int) str extern;
fn read_child_stderr(cmd Command, len int) str extern;
