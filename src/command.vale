//export List<str> as StrTest;
export Array<imm, str> as StrChain;
export Array<mut, str> as MutStrChain;

struct Subprocess {
    handle int;
}

fn spawn(command str, args &List<StrSlice>) Subprocess {
    newlist! = List<str>();
    each (&args) (element){
        newlist!.add(element);
    }
    ret spawn(command, &newlist);
}

/// tried using a &List to solve . issue
fn spawn(command str, args &List<str>) Subprocess {
    handle = from_path(command, args);
    retval = Subprocess(handle);
    ret retval;
}

fn spawn(command str) Subprocess {
    list! = command.split(" ");
    cmd = str(list.get(0));
    newlist! = List<str>();
    enumerate(&!list, (element, index){
        if(index != 0) { newlist!.add(str(list.get(index))); }
    });
    ret spawn(cmd, &newlist);
}

struct ExecResult export {
    returnCode int;
    stdout str;
    stderr str;
}

fn join(self &Subprocess, read_len int) ExecResult {
    stdout = read_child_stdout(self.handle, read_len);
    stderr = read_child_stderr(self.handle, read_len);
    resultCode = join_subprocess(self.handle);
    ret ExecResult(resultCode, stdout, stderr);
}

fn create_process(cmd str, args &List<str>, paths! List<str>) int {
    outcmd! = "hello";   
    if (exists(cmd) != 1) {
       each (&paths) (path){
            cmds = iterdir(path);
            each (&cmds) (exec){
                if(exec == cmd){
                    mut outcmd = path + "/" + exec;
                }
            }
        } 
    }else{
        mut outcmd = cmd;
    }

    if (outcmd == "hello") {
        panic("unable to find command " + cmd);
    }
    if (is_dir(outcmd) == 1) {
        panic("directories aren't executable"); 
    }
    
    cmdlist! = List<str>();
    cmdlist!.add(outcmd);
    each (&args) (element){
        cmdlist!.add(element);
    }
    command = launch_command(cmdlist.toImmArray());
    ret command;
}

fn from_path(cmd str, args &List<str>) int {
    path! = List<str>();
    each (&get_env_var("PATH").split(":")) (path_val){
        path!.add(str(path_val));
    }
    ret create_process(cmd, args, path);
}

fn get_env_var(name str) str extern;
fn launch_command(args Array<imm,str>) int extern;
fn read_child_stdout(cmd int, len int) str extern;
fn read_child_stderr(cmd int, len int) str extern;
fn join_subprocess(cmd int) int extern;
