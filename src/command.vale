//export List<str> as StrTest;
export Array<imm, str> as StrChain;

struct Subprocess {
    path List<str>;
    cmd Command;
    result int; 
}

fn create_process(cmd str, args Array<imm, str>, paths Array<imm, str>){
    outcmd! = cmd; 
    if (exists(cmd) != 1) {
        each (&paths) (path){
            cmds = iterdir(path);
            each (&cmds) (exec){
                if(exec == cmd){
                    mut outcmd = path + exec;
                    println("found command: " + cmd);
                }
            }
        } 
    }
     
    if (is_dir(cmd) == 1) {
        println("directories aren't executable");
        panic(); 
    }
     
}

fn from_path(cmd str, args Array<imm, str>) {
    path = List<str>();
    each (&split(get_env_var("PATH"), ":")) (element){
        path!.add(str(element));
    }
    ret create_process(cmd, args, path.toArray());
}

struct Command export imm{
    handle int;
}

//export Command as ExCommand;

fn get_env_var(name str) str extern;
fn launch_command(args Array<imm,str>) Command extern;
fn read_child_stdout(cmd Command, len int) str extern;
fn read_child_stderr(cmd Command, len int) str extern;
